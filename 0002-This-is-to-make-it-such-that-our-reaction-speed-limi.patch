From 5069b9785aea860098ce5210b52e1b741a6c8e80 Mon Sep 17 00:00:00 2001
From: jianmingyong <jianming1993@gmail.com>
Date: Wed, 18 Apr 2018 21:04:27 +0800
Subject: [PATCH 2/6] This is to make it such that our reaction speed limit is
 0.25s rather than 1s.

Faster by a little but still throttle down after that.
---
 .../Net/Queue/RequestQueueBucket.cs           | 25 ++++++++++++++-----
 1 file changed, 19 insertions(+), 6 deletions(-)

diff --git a/src/Discord.Net.Rest/Net/Queue/RequestQueueBucket.cs b/src/Discord.Net.Rest/Net/Queue/RequestQueueBucket.cs
index 2cc4b8a1..61d16ea1 100644
--- a/src/Discord.Net.Rest/Net/Queue/RequestQueueBucket.cs
+++ b/src/Discord.Net.Rest/Net/Queue/RequestQueueBucket.cs
@@ -1,11 +1,14 @@
-ï»¿using Newtonsoft.Json;
+using Newtonsoft.Json;
 using Newtonsoft.Json.Linq;
 using System;
+
 #if DEBUG_LIMITS
 using System.Diagnostics;
 #endif
+
 using System.IO;
 using System.Net;
+using System.Text.RegularExpressions;
 using System.Threading;
 using System.Threading.Tasks;
 
@@ -37,8 +40,9 @@ namespace Discord.Net.Queue
             _resetTick = null;
             LastAttemptAt = DateTimeOffset.UtcNow;
         }
-        
-        static int nextId = 0;
+
+        private static int nextId = 0;
+
         public async Task<Stream> SendAsync(RestRequest request)
         {
             int id = Interlocked.Increment(ref nextId);
@@ -100,8 +104,12 @@ namespace Discord.Net.Queue
                                         using (var jsonReader = new JsonTextReader(reader))
                                         {
                                             var json = JToken.Load(jsonReader);
-                                            try { code = json.Value<int>("code"); } catch { };
-                                            try { reason = json.Value<string>("message"); } catch { };
+                                            try
+                                            { code = json.Value<int>("code"); }
+                                            catch { };
+                                            try
+                                            { reason = json.Value<string>("message"); }
+                                            catch { };
                                         }
                                     }
                                     catch { }
@@ -250,7 +258,11 @@ namespace Discord.Net.Queue
                 }
                 else if (info.Reset.HasValue)
                 {
-                    resetTick = info.Reset.Value.AddSeconds(info.Lag?.TotalSeconds ?? 1.0);
+                    if (Regex.IsMatch(request.Endpoint, @"channels\/\d+?\/messages\/\d+?\/reactions\/"))
+                        resetTick = info.Reset.Value.AddMilliseconds(-750).AddMilliseconds(info.Lag?.TotalMilliseconds ?? 1.0);
+                    else
+                        resetTick = info.Reset.Value.AddSeconds(info.Lag?.TotalSeconds ?? 1.0);
+
                     int diff = (int)(resetTick.Value - DateTimeOffset.UtcNow).TotalMilliseconds;
 #if DEBUG_LIMITS
                     Debug.WriteLine($"[{id}] X-RateLimit-Reset: {info.Reset.Value.ToUnixTimeSeconds()} ({diff} ms, {info.Lag?.TotalMilliseconds} ms lag)");
@@ -288,6 +300,7 @@ namespace Discord.Net.Queue
                 }
             }
         }
+
         private async Task QueueReset(int id, int millis)
         {
             while (true)
-- 
2.17.1.windows.2

